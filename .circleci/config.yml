version: 2.1
orbs:
  slack: circleci/slack@4.3.0
commands:
  destroy-environment:
    parameters:
      workflow_id:
        description: workflow id
        type: string
        default: "b988ccf0-7b2c-4ec9-bd38-5abb0a74bb16"

    steps:
      - run:
          name: Install AWS CLI
          command: |
            if ! [ -x "$(command -v aws)" ]; then
            pip install awscli
            fi
          when: on_fail
      
      - run:
          name: Remove S3 files
          command: |
            echo ${workflow_id}
            aws s3 rm s3://udapeople-${workflow_id} --recursive
          when: on_fail

      - run:
          name: Destroy frontend environments
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${workflow_id}"
          when: on_fail 

      - run:    
          name: Destroy backend environments
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${workflow_id}"
          when: on_fail 
      
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        description: workflow id
        type: string
        default: "b988ccf0-7b2c-4ec9-bd38-5abb0a74bb16"   
    steps:
      - run:
          name: Revert migrations
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            migration_status=$(curl -H "token: 63bb891f-21b3-4e53-a949-c1fc57b43346" --request GET https://api.memstash.io/values/migration_status_${workflow_id})
            if(( $migration_status==1 ));
            then
            cd ~/project/backend
            npm i
            npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    environment:
      branch_url: << pipeline.project.git_url >>/tree/<< pipeline.git.branch >>
      commit_url: << pipeline.project.git_url >>/commit/<< pipeline.git.revision >>
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
            echo "export COMMIT_MESSAGE=\"$(git log --pretty=format:%s -n 1 --abbrev-commit)\"" >> $BASH_ENV
            echo "export COMMIT_SHA=\"$(git log --pretty=format:%h -n 1 --abbrev-commit)\"" >> $BASH_ENV
      - slack/notify:
          event: fail
          custom: |
            {
              "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "Build Fail ! :red_circle:",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "Failed frontend in build $CIRCLE_PULL_REQUESTS of <$REPO_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME>(<${branch_url}|$CIRCLE_BRANCH>)\n Build No: <$CIRCLE_BUILD_URL|$CIRCLE_BUILD_NUM> \n - ${COMMIT_MESSAGE} (<${commit_url}|${COMMIT_SHA})> \n"
                }
              }
            ]
            }
      - slack/notify:
          custom: |
            {
              "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "Build Success ! :large_green_circle: ",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "Success frontend in build $CIRCLE_PULL_REQUESTS of <$REPO_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME>(<${branch_url}|$CIRCLE_BRANCH>)\n Build No: <$CIRCLE_BUILD_URL|$CIRCLE_BUILD_NUM> \n - ${COMMIT_MESSAGE} (<${commit_url}|${COMMIT_SHA}>) \n"
                }
              }
            ]
            }
          event: pass
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    environment:
      branch_url: << pipeline.project.git_url >>/tree/<< pipeline.git.branch >>
      commit_url: << pipeline.project.git_url >>/commit/<< pipeline.git.revision >>
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
            echo "export COMMIT_MESSAGE=\"$(git log --pretty=format:%s -n 1 --abbrev-commit)\"" >> $BASH_ENV
            echo "export COMMIT_SHA=\"$(git log --pretty=format:%h -n 1 --abbrev-commit)\"" >> $BASH_ENV
      - slack/notify:
          event: fail
          custom: |
            {
              "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "Build Fail ! :red_circle:",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "Failed Backend in build $CIRCLE_PULL_REQUESTS of <$REPO_URL|*$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME*>(<${branch_url}|$CIRCLE_BRANCH>)\n *Build No*: <$CIRCLE_BUILD_URL|$CIRCLE_BUILD_NUM> \n *Commit* : <${commit_url}|${COMMIT_MESSAGE}> \n"
                }
              }
            ]
            }
      - slack/notify:
          custom: |
            {
              "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "Build Success ! :large_green_circle:",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "Success Backend in build $CIRCLE_PULL_REQUESTS of <$REPO_URL|*$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME*>(<${branch_url}|$CIRCLE_BRANCH>)\n Build No: *<$CIRCLE_BUILD_URL|$CIRCLE_BUILD_NUM>* \n Commit : *<${commit_url}|${COMMIT_MESSAGE}>* \n"
                }
              }
            ]
            }
          event: pass
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: frontend test
          command: |
            cd frontend
            npm i
            npm i oauth-sign 
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: backend test
          command: |
            cd backend
            npm i
            npm i oauth-sign
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: frontend scan
          command: |
            cd frontend
            npm audit --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: backend scan
          command: |
            cd backend
            sudo npm audit fix --force


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Installing dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="udapeople" \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
              BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            curl -H "Content-Type: text/plain" -H "token: 63bb891f-21b3-4e53-a949-c1fc57b43346" --request PUT \
            --data "$BACKEND_IP" https://api.memstash.io/values/BACKEND_IP

#       - run:
#           name: Ensure front-end infrastructure exist
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/frontend.yml \
#               --tags project="udapeople" \
#               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible/
            curl -H "token: 63bb891f-21b3-4e53-a949-c1fc57b43346" --request GET https://api.memstash.io/values/BACKEND_IP >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

#       - destroy-environment
          # command: |
          #   aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}"
          #   aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}"
          # when: on_fail
      # - destroy-environments:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID}"

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["2e:d9:16:be:e4:05:4b:49:b3:dd:d5:3c:26:aa:12:bb"]
      - attach_workspace:
          at: ~/
      - run: cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migrations > migration.txt

      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been successfullsssy" ./backend/migration.txt
            then  curl -H "Content-Type: text/plain" -H "token: 63bb891f-21b3-4e53-a949-c1fc57b43346" --request PUT --data "1" https://api.memstash.io/values/migration_status_${CIRCLE_WORKFLOW_ID}
            else  curl -H "Content-Type: text/plain" -H "token: 63bb891f-21b3-4e53-a949-c1fc57b43346" --request PUT --data "0" https://api.memstash.io/values/migration_status_${CIRCLE_WORKFLOW_ID}
            fi
     # Here's where you will add some code to rollback on failure 
      - destroy-environment
      - revert-migrations

   
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
            npm i
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: 63bb891f-21b3-4e53-a949-c1fc57b43346" --request GET https://api.memstash.io/values/BACKEND_IP)
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp ./dist s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["2e:d9:16:be:e4:05:4b:49:b3:dd:d5:3c:26:aa:12:bb"]
      - attach_workspace:
          at: ~/
      - run: cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update curl
      - run:
          name: Set Environment variable
          command: |
            cd backend
            touch .env
            echo ENVIRONMENT=$ENV >> .env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> .env
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible/
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt deploy-backend.yml
#           no_output_timeout: 60m
      # Here's where you will add some code to rollback on failure
      # - destroy-environment
      # - revert-migrations

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl

      - run:
          name: Backend smoke test.
          command: |
              BACKEND_IP=13.113.155.206
              BACKEND_API_STATUS="http://${BACKEND_IP}:3030/api/status"
              echo $BACKEND_API_STATUS
              if curl -s --head ${BACKEND_API_STATUS}
              then
              return 0
              else
              return 1
              fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com"
              if curl -s ${URL} | grep "Welcome"
              then
              return 1
              else
              return 1
              fi
      - destroy-environment
        # workflow_id: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name "cloudfront-${CIRCLE_WORKFLOW_ID}" \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}"

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}
            fi 

workflows:
  default:
    jobs:
      - deploy-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      - deploy-backend:
           requires: [configure-infrastructure]
#       - smoke-test
          # requires: [deploy-backend]
